// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Collector extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collector entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collector entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collector", id.toString(), this);
  }

  static load(id: string): Collector | null {
    return store.get("Collector", id) as Collector | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalOwned(): BigInt {
    let value = this.get("totalOwned");
    return value.toBigInt();
  }

  set totalOwned(value: BigInt) {
    this.set("totalOwned", Value.fromBigInt(value));
  }

  get neolastics(): Array<string> | null {
    let value = this.get("neolastics");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set neolastics(value: Array<string> | null) {
    if (value === null) {
      this.unset("neolastics");
    } else {
      this.set("neolastics", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Neolastic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Neolastic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Neolastic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Neolastic", id.toString(), this);
  }

  static load(id: string): Neolastic | null {
    return store.get("Neolastic", id) as Neolastic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get created(): BigInt {
    let value = this.get("created");
    return value.toBigInt();
  }

  set created(value: BigInt) {
    this.set("created", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get pricePaid(): BigInt {
    let value = this.get("pricePaid");
    return value.toBigInt();
  }

  set pricePaid(value: BigInt) {
    this.set("pricePaid", Value.fromBigInt(value));
  }
}

export class Curve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Curve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Curve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Curve", id.toString(), this);
  }

  static load(id: string): Curve | null {
    return store.get("Curve", id) as Curve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalEverMinted(): BigInt {
    let value = this.get("totalEverMinted");
    return value.toBigInt();
  }

  set totalEverMinted(value: BigInt) {
    this.set("totalEverMinted", Value.fromBigInt(value));
  }

  get totalEverPaid(): BigInt {
    let value = this.get("totalEverPaid");
    return value.toBigInt();
  }

  set totalEverPaid(value: BigInt) {
    this.set("totalEverPaid", Value.fromBigInt(value));
  }

  get reserve(): BigInt {
    let value = this.get("reserve");
    return value.toBigInt();
  }

  set reserve(value: BigInt) {
    this.set("reserve", Value.fromBigInt(value));
  }

  get mintPrice(): BigInt {
    let value = this.get("mintPrice");
    return value.toBigInt();
  }

  set mintPrice(value: BigInt) {
    this.set("mintPrice", Value.fromBigInt(value));
  }

  get burnPrice(): BigInt {
    let value = this.get("burnPrice");
    return value.toBigInt();
  }

  set burnPrice(value: BigInt) {
    this.set("burnPrice", Value.fromBigInt(value));
  }
}
