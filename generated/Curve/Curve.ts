// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get priceReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserveAfterBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pricePaid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserveAfterMint(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Curve extends ethereum.SmartContract {
  static bind(address: Address): Curve {
    return new Curve("Curve", address);
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentPriceToBurn(): BigInt {
    let result = super.call(
      "getCurrentPriceToBurn",
      "getCurrentPriceToBurn():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPriceToBurn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPriceToBurn",
      "getCurrentPriceToBurn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPriceToMint(): BigInt {
    let result = super.call(
      "getCurrentPriceToMint",
      "getCurrentPriceToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPriceToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPriceToMint",
      "getCurrentPriceToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentSupply(): BigInt {
    let result = super.call(
      "getCurrentSupply",
      "getCurrentSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSupply",
      "getCurrentSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveCut(): BigInt {
    let result = super.call("getReserveCut", "getReserveCut():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getReserveCut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveCut",
      "getReserveCut():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initBurnPrice(): BigInt {
    let result = super.call("initBurnPrice", "initBurnPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initBurnPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initBurnPrice",
      "initBurnPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initMintPrice(): BigInt {
    let result = super.call("initMintPrice", "initMintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initMintPrice",
      "initMintPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  neolastics(): Address {
    let result = super.call("neolastics", "neolastics():(address)", []);

    return result[0].toAddress();
  }

  try_neolastics(): ethereum.CallResult<Address> {
    let result = super.tryCall("neolastics", "neolastics():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserve(): BigInt {
    let result = super.call("reserve", "reserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserve", "reserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
